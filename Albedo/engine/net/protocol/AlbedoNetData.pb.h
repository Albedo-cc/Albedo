// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AlbedoNetData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AlbedoNetData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AlbedoNetData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AlbedoNetData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AlbedoNetData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AlbedoNetData_2eproto;
class AlbedoNetData;
struct AlbedoNetDataDefaultTypeInternal;
extern AlbedoNetDataDefaultTypeInternal _AlbedoNetData_default_instance_;
class AlbedoNetDataView;
struct AlbedoNetDataViewDefaultTypeInternal;
extern AlbedoNetDataViewDefaultTypeInternal _AlbedoNetDataView_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AlbedoNetData* Arena::CreateMaybeMessage<::AlbedoNetData>(Arena*);
template<> ::AlbedoNetDataView* Arena::CreateMaybeMessage<::AlbedoNetDataView>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AlbedoNetDataView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AlbedoNetDataView) */ {
 public:
  inline AlbedoNetDataView() : AlbedoNetDataView(nullptr) {}
  ~AlbedoNetDataView() override;
  explicit PROTOBUF_CONSTEXPR AlbedoNetDataView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlbedoNetDataView(const AlbedoNetDataView& from);
  AlbedoNetDataView(AlbedoNetDataView&& from) noexcept
    : AlbedoNetDataView() {
    *this = ::std::move(from);
  }

  inline AlbedoNetDataView& operator=(const AlbedoNetDataView& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlbedoNetDataView& operator=(AlbedoNetDataView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlbedoNetDataView& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlbedoNetDataView* internal_default_instance() {
    return reinterpret_cast<const AlbedoNetDataView*>(
               &_AlbedoNetDataView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlbedoNetDataView& a, AlbedoNetDataView& b) {
    a.Swap(&b);
  }
  inline void Swap(AlbedoNetDataView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlbedoNetDataView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlbedoNetDataView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlbedoNetDataView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlbedoNetDataView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlbedoNetDataView& from) {
    AlbedoNetDataView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlbedoNetDataView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlbedoNetDataView";
  }
  protected:
  explicit AlbedoNetDataView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // int32 offset = 1;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 size = 2;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AlbedoNetDataView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t offset_;
    int32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AlbedoNetData_2eproto;
};
// -------------------------------------------------------------------

class AlbedoNetData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AlbedoNetData) */ {
 public:
  inline AlbedoNetData() : AlbedoNetData(nullptr) {}
  ~AlbedoNetData() override;
  explicit PROTOBUF_CONSTEXPR AlbedoNetData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlbedoNetData(const AlbedoNetData& from);
  AlbedoNetData(AlbedoNetData&& from) noexcept
    : AlbedoNetData() {
    *this = ::std::move(from);
  }

  inline AlbedoNetData& operator=(const AlbedoNetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlbedoNetData& operator=(AlbedoNetData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlbedoNetData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlbedoNetData* internal_default_instance() {
    return reinterpret_cast<const AlbedoNetData*>(
               &_AlbedoNetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlbedoNetData& a, AlbedoNetData& b) {
    a.Swap(&b);
  }
  inline void Swap(AlbedoNetData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlbedoNetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlbedoNetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlbedoNetData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlbedoNetData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlbedoNetData& from) {
    AlbedoNetData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlbedoNetData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlbedoNetData";
  }
  protected:
  explicit AlbedoNetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kViewsFieldNumber = 2,
    kCommentFieldNumber = 3,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // repeated .AlbedoNetDataView views = 2;
  int views_size() const;
  private:
  int _internal_views_size() const;
  public:
  void clear_views();
  ::AlbedoNetDataView* mutable_views(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AlbedoNetDataView >*
      mutable_views();
  private:
  const ::AlbedoNetDataView& _internal_views(int index) const;
  ::AlbedoNetDataView* _internal_add_views();
  public:
  const ::AlbedoNetDataView& views(int index) const;
  ::AlbedoNetDataView* add_views();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AlbedoNetDataView >&
      views() const;

  // optional string comment = 3;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // @@protoc_insertion_point(class_scope:AlbedoNetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AlbedoNetDataView > views_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AlbedoNetData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlbedoNetDataView

// int32 offset = 1;
inline void AlbedoNetDataView::clear_offset() {
  _impl_.offset_ = 0;
}
inline int32_t AlbedoNetDataView::_internal_offset() const {
  return _impl_.offset_;
}
inline int32_t AlbedoNetDataView::offset() const {
  // @@protoc_insertion_point(field_get:AlbedoNetDataView.offset)
  return _internal_offset();
}
inline void AlbedoNetDataView::_internal_set_offset(int32_t value) {
  
  _impl_.offset_ = value;
}
inline void AlbedoNetDataView::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:AlbedoNetDataView.offset)
}

// int32 size = 2;
inline void AlbedoNetDataView::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t AlbedoNetDataView::_internal_size() const {
  return _impl_.size_;
}
inline int32_t AlbedoNetDataView::size() const {
  // @@protoc_insertion_point(field_get:AlbedoNetDataView.size)
  return _internal_size();
}
inline void AlbedoNetDataView::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void AlbedoNetDataView::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:AlbedoNetDataView.size)
}

// -------------------------------------------------------------------

// AlbedoNetData

// repeated float data = 1;
inline int AlbedoNetData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int AlbedoNetData::data_size() const {
  return _internal_data_size();
}
inline void AlbedoNetData::clear_data() {
  _impl_.data_.Clear();
}
inline float AlbedoNetData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline float AlbedoNetData::data(int index) const {
  // @@protoc_insertion_point(field_get:AlbedoNetData.data)
  return _internal_data(index);
}
inline void AlbedoNetData::set_data(int index, float value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:AlbedoNetData.data)
}
inline void AlbedoNetData::_internal_add_data(float value) {
  _impl_.data_.Add(value);
}
inline void AlbedoNetData::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:AlbedoNetData.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AlbedoNetData::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AlbedoNetData::data() const {
  // @@protoc_insertion_point(field_list:AlbedoNetData.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AlbedoNetData::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AlbedoNetData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:AlbedoNetData.data)
  return _internal_mutable_data();
}

// repeated .AlbedoNetDataView views = 2;
inline int AlbedoNetData::_internal_views_size() const {
  return _impl_.views_.size();
}
inline int AlbedoNetData::views_size() const {
  return _internal_views_size();
}
inline void AlbedoNetData::clear_views() {
  _impl_.views_.Clear();
}
inline ::AlbedoNetDataView* AlbedoNetData::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:AlbedoNetData.views)
  return _impl_.views_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AlbedoNetDataView >*
AlbedoNetData::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:AlbedoNetData.views)
  return &_impl_.views_;
}
inline const ::AlbedoNetDataView& AlbedoNetData::_internal_views(int index) const {
  return _impl_.views_.Get(index);
}
inline const ::AlbedoNetDataView& AlbedoNetData::views(int index) const {
  // @@protoc_insertion_point(field_get:AlbedoNetData.views)
  return _internal_views(index);
}
inline ::AlbedoNetDataView* AlbedoNetData::_internal_add_views() {
  return _impl_.views_.Add();
}
inline ::AlbedoNetDataView* AlbedoNetData::add_views() {
  ::AlbedoNetDataView* _add = _internal_add_views();
  // @@protoc_insertion_point(field_add:AlbedoNetData.views)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AlbedoNetDataView >&
AlbedoNetData::views() const {
  // @@protoc_insertion_point(field_list:AlbedoNetData.views)
  return _impl_.views_;
}

// optional string comment = 3;
inline bool AlbedoNetData::_internal_has_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlbedoNetData::has_comment() const {
  return _internal_has_comment();
}
inline void AlbedoNetData::clear_comment() {
  _impl_.comment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlbedoNetData::comment() const {
  // @@protoc_insertion_point(field_get:AlbedoNetData.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlbedoNetData::set_comment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AlbedoNetData.comment)
}
inline std::string* AlbedoNetData::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:AlbedoNetData.comment)
  return _s;
}
inline const std::string& AlbedoNetData::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void AlbedoNetData::_internal_set_comment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* AlbedoNetData::_internal_mutable_comment() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* AlbedoNetData::release_comment() {
  // @@protoc_insertion_point(field_release:AlbedoNetData.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.comment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AlbedoNetData::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AlbedoNetData.comment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AlbedoNetData_2eproto
