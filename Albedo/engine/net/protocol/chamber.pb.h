// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chamber.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chamber_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chamber_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AlbedoNetData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chamber_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chamber_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chamber_2eproto;
namespace Chamber {
class ChamberData;
struct ChamberDataDefaultTypeInternal;
extern ChamberDataDefaultTypeInternal _ChamberData_default_instance_;
}  // namespace Chamber
PROTOBUF_NAMESPACE_OPEN
template<> ::Chamber::ChamberData* Arena::CreateMaybeMessage<::Chamber::ChamberData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Chamber {

enum Player : int {
  CAMBER = 0,
  A = 1,
  B = 2,
  C = 3,
  D = 4,
  Player_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Player_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Player_IsValid(int value);
constexpr Player Player_MIN = CAMBER;
constexpr Player Player_MAX = D;
constexpr int Player_ARRAYSIZE = Player_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Player_descriptor();
template<typename T>
inline const std::string& Player_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Player>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Player_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Player_descriptor(), enum_t_value);
}
inline bool Player_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Player* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Player>(
    Player_descriptor(), name, value);
}
enum DataUsage : int {
  camera_view_matrix = 0,
  chamber_message = 100,
  player_message = 101,
  DataUsage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataUsage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataUsage_IsValid(int value);
constexpr DataUsage DataUsage_MIN = camera_view_matrix;
constexpr DataUsage DataUsage_MAX = player_message;
constexpr int DataUsage_ARRAYSIZE = DataUsage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataUsage_descriptor();
template<typename T>
inline const std::string& DataUsage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataUsage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataUsage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataUsage_descriptor(), enum_t_value);
}
inline bool DataUsage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataUsage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataUsage>(
    DataUsage_descriptor(), name, value);
}
// ===================================================================

class ChamberData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chamber.ChamberData) */ {
 public:
  inline ChamberData() : ChamberData(nullptr) {}
  ~ChamberData() override;
  explicit PROTOBUF_CONSTEXPR ChamberData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChamberData(const ChamberData& from);
  ChamberData(ChamberData&& from) noexcept
    : ChamberData() {
    *this = ::std::move(from);
  }

  inline ChamberData& operator=(const ChamberData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChamberData& operator=(ChamberData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChamberData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChamberData* internal_default_instance() {
    return reinterpret_cast<const ChamberData*>(
               &_ChamberData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChamberData& a, ChamberData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChamberData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChamberData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChamberData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChamberData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChamberData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChamberData& from) {
    ChamberData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChamberData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chamber.ChamberData";
  }
  protected:
  explicit ChamberData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kSenderFieldNumber = 1,
    kUsageFieldNumber = 2,
  };
  // .AlbedoNetData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::AlbedoNetData& data() const;
  PROTOBUF_NODISCARD ::AlbedoNetData* release_data();
  ::AlbedoNetData* mutable_data();
  void set_allocated_data(::AlbedoNetData* data);
  private:
  const ::AlbedoNetData& _internal_data() const;
  ::AlbedoNetData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::AlbedoNetData* data);
  ::AlbedoNetData* unsafe_arena_release_data();

  // .Chamber.Player sender = 1;
  void clear_sender();
  ::Chamber::Player sender() const;
  void set_sender(::Chamber::Player value);
  private:
  ::Chamber::Player _internal_sender() const;
  void _internal_set_sender(::Chamber::Player value);
  public:

  // .Chamber.DataUsage usage = 2;
  void clear_usage();
  ::Chamber::DataUsage usage() const;
  void set_usage(::Chamber::DataUsage value);
  private:
  ::Chamber::DataUsage _internal_usage() const;
  void _internal_set_usage(::Chamber::DataUsage value);
  public:

  // @@protoc_insertion_point(class_scope:Chamber.ChamberData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::AlbedoNetData* data_;
    int sender_;
    int usage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chamber_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChamberData

// .Chamber.Player sender = 1;
inline void ChamberData::clear_sender() {
  _impl_.sender_ = 0;
}
inline ::Chamber::Player ChamberData::_internal_sender() const {
  return static_cast< ::Chamber::Player >(_impl_.sender_);
}
inline ::Chamber::Player ChamberData::sender() const {
  // @@protoc_insertion_point(field_get:Chamber.ChamberData.sender)
  return _internal_sender();
}
inline void ChamberData::_internal_set_sender(::Chamber::Player value) {
  
  _impl_.sender_ = value;
}
inline void ChamberData::set_sender(::Chamber::Player value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:Chamber.ChamberData.sender)
}

// .Chamber.DataUsage usage = 2;
inline void ChamberData::clear_usage() {
  _impl_.usage_ = 0;
}
inline ::Chamber::DataUsage ChamberData::_internal_usage() const {
  return static_cast< ::Chamber::DataUsage >(_impl_.usage_);
}
inline ::Chamber::DataUsage ChamberData::usage() const {
  // @@protoc_insertion_point(field_get:Chamber.ChamberData.usage)
  return _internal_usage();
}
inline void ChamberData::_internal_set_usage(::Chamber::DataUsage value) {
  
  _impl_.usage_ = value;
}
inline void ChamberData::set_usage(::Chamber::DataUsage value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:Chamber.ChamberData.usage)
}

// .AlbedoNetData data = 3;
inline bool ChamberData::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool ChamberData::has_data() const {
  return _internal_has_data();
}
inline const ::AlbedoNetData& ChamberData::_internal_data() const {
  const ::AlbedoNetData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::AlbedoNetData&>(
      ::_AlbedoNetData_default_instance_);
}
inline const ::AlbedoNetData& ChamberData::data() const {
  // @@protoc_insertion_point(field_get:Chamber.ChamberData.data)
  return _internal_data();
}
inline void ChamberData::unsafe_arena_set_allocated_data(
    ::AlbedoNetData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Chamber.ChamberData.data)
}
inline ::AlbedoNetData* ChamberData::release_data() {
  
  ::AlbedoNetData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AlbedoNetData* ChamberData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:Chamber.ChamberData.data)
  
  ::AlbedoNetData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::AlbedoNetData* ChamberData::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::AlbedoNetData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::AlbedoNetData* ChamberData::mutable_data() {
  ::AlbedoNetData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Chamber.ChamberData.data)
  return _msg;
}
inline void ChamberData::set_allocated_data(::AlbedoNetData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Chamber.ChamberData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Chamber

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Chamber::Player> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Chamber::Player>() {
  return ::Chamber::Player_descriptor();
}
template <> struct is_proto_enum< ::Chamber::DataUsage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Chamber::DataUsage>() {
  return ::Chamber::DataUsage_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chamber_2eproto
