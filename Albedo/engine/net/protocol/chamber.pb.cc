// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chamber.proto

#include "chamber.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ABDChamber {
PROTOBUF_CONSTEXPR ChamberLogin::ChamberLogin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pass_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChamberLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChamberLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChamberLoginDefaultTypeInternal() {}
  union {
    ChamberLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChamberLoginDefaultTypeInternal _ChamberLogin_default_instance_;
PROTOBUF_CONSTEXPR ChamberData::ChamberData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buffer_)*/nullptr
  , /*decltype(_impl_.uid_)*/0
  , /*decltype(_impl_.usage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChamberDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChamberDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChamberDataDefaultTypeInternal() {}
  union {
    ChamberData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChamberDataDefaultTypeInternal _ChamberData_default_instance_;
PROTOBUF_CONSTEXPR BufferView::BufferView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferViewDefaultTypeInternal() {}
  union {
    BufferView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferViewDefaultTypeInternal _BufferView_default_instance_;
PROTOBUF_CONSTEXPR Buffer::Buffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_.views_)*/{}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferDefaultTypeInternal() {}
  union {
    Buffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferDefaultTypeInternal _Buffer_default_instance_;
}  // namespace ABDChamber
static ::_pb::Metadata file_level_metadata_chamber_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chamber_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chamber_2eproto = nullptr;

const uint32_t TableStruct_chamber_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ABDChamber::ChamberLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ABDChamber::ChamberLogin, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::ChamberLogin, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::ChamberLogin, _impl_.pass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ABDChamber::ChamberData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ABDChamber::ChamberData, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::ChamberData, _impl_.usage_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::ChamberData, _impl_.buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ABDChamber::BufferView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ABDChamber::BufferView, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::BufferView, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::Buffer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::Buffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ABDChamber::Buffer, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::Buffer, _impl_.views_),
  PROTOBUF_FIELD_OFFSET(::ABDChamber::Buffer, _impl_.comment_),
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ABDChamber::ChamberLogin)},
  { 9, -1, -1, sizeof(::ABDChamber::ChamberData)},
  { 18, -1, -1, sizeof(::ABDChamber::BufferView)},
  { 26, 35, -1, sizeof(::ABDChamber::Buffer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ABDChamber::_ChamberLogin_default_instance_._instance,
  &::ABDChamber::_ChamberData_default_instance_._instance,
  &::ABDChamber::_BufferView_default_instance_._instance,
  &::ABDChamber::_Buffer_default_instance_._instance,
};

const char descriptor_table_protodef_chamber_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rchamber.proto\022\nABDChamber\";\n\014ChamberLo"
  "gin\022\013\n\003UID\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\014\n\004pa"
  "ss\030\003 \001(\t\"d\n\013ChamberData\022\013\n\003UID\030\001 \001(\005\022$\n\005"
  "usage\030\002 \001(\0162\025.ABDChamber.DataUsage\022\"\n\006bu"
  "ffer\030\003 \001(\0132\022.ABDChamber.Buffer\"*\n\nBuffer"
  "View\022\016\n\006offset\030\001 \001(\005\022\014\n\004size\030\002 \001(\005\"b\n\006Bu"
  "ffer\022\017\n\007content\030\001 \003(\002\022%\n\005views\030\002 \003(\0132\026.A"
  "BDChamber.BufferView\022\024\n\007comment\030\003 \001(\tH\000\210"
  "\001\001B\n\n\010_comment*\206\001\n\tDataUsage\022\022\n\016CHAMBER_"
  "FAILED\020\000\022\023\n\017CHAMBER_SUCCESS\020\001\022\021\n\rCHAMBER"
  "_LOGIN\020\002\022\022\n\016camera_matrics\020d\022\024\n\017chamber_"
  "message\020\310\001\022\023\n\016player_message\020\311\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_chamber_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chamber_2eproto = {
    false, false, 479, descriptor_table_protodef_chamber_2eproto,
    "chamber.proto",
    &descriptor_table_chamber_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_chamber_2eproto::offsets,
    file_level_metadata_chamber_2eproto, file_level_enum_descriptors_chamber_2eproto,
    file_level_service_descriptors_chamber_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chamber_2eproto_getter() {
  return &descriptor_table_chamber_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chamber_2eproto(&descriptor_table_chamber_2eproto);
namespace ABDChamber {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataUsage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chamber_2eproto);
  return file_level_enum_descriptors_chamber_2eproto[0];
}
bool DataUsage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 200:
    case 201:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChamberLogin::_Internal {
 public:
};

ChamberLogin::ChamberLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ABDChamber.ChamberLogin)
}
ChamberLogin::ChamberLogin(const ChamberLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChamberLogin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.pass_){}
    , decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pass().empty()) {
    _this->_impl_.pass_.Set(from._internal_pass(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.uid_ = from._impl_.uid_;
  // @@protoc_insertion_point(copy_constructor:ABDChamber.ChamberLogin)
}

inline void ChamberLogin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.pass_){}
    , decltype(_impl_.uid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChamberLogin::~ChamberLogin() {
  // @@protoc_insertion_point(destructor:ABDChamber.ChamberLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChamberLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.pass_.Destroy();
}

void ChamberLogin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChamberLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:ABDChamber.ChamberLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.pass_.ClearToEmpty();
  _impl_.uid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChamberLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 UID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ABDChamber.ChamberLogin.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string pass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pass();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ABDChamber.ChamberLogin.pass"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChamberLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ABDChamber.ChamberLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UID = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ABDChamber.ChamberLogin.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string pass = 3;
  if (!this->_internal_pass().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pass().data(), static_cast<int>(this->_internal_pass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ABDChamber.ChamberLogin.pass");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ABDChamber.ChamberLogin)
  return target;
}

size_t ChamberLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ABDChamber.ChamberLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string pass = 3;
  if (!this->_internal_pass().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pass());
  }

  // int32 UID = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChamberLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChamberLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChamberLogin::GetClassData() const { return &_class_data_; }


void ChamberLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChamberLogin*>(&to_msg);
  auto& from = static_cast<const ChamberLogin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ABDChamber.ChamberLogin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_pass().empty()) {
    _this->_internal_set_pass(from._internal_pass());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChamberLogin::CopyFrom(const ChamberLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ABDChamber.ChamberLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChamberLogin::IsInitialized() const {
  return true;
}

void ChamberLogin::InternalSwap(ChamberLogin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_, lhs_arena,
      &other->_impl_.pass_, rhs_arena
  );
  swap(_impl_.uid_, other->_impl_.uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChamberLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chamber_2eproto_getter, &descriptor_table_chamber_2eproto_once,
      file_level_metadata_chamber_2eproto[0]);
}

// ===================================================================

class ChamberData::_Internal {
 public:
  static const ::ABDChamber::Buffer& buffer(const ChamberData* msg);
};

const ::ABDChamber::Buffer&
ChamberData::_Internal::buffer(const ChamberData* msg) {
  return *msg->_impl_.buffer_;
}
ChamberData::ChamberData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ABDChamber.ChamberData)
}
ChamberData::ChamberData(const ChamberData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChamberData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buffer_){nullptr}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.usage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_buffer()) {
    _this->_impl_.buffer_ = new ::ABDChamber::Buffer(*from._impl_.buffer_);
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usage_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.usage_));
  // @@protoc_insertion_point(copy_constructor:ABDChamber.ChamberData)
}

inline void ChamberData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buffer_){nullptr}
    , decltype(_impl_.uid_){0}
    , decltype(_impl_.usage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChamberData::~ChamberData() {
  // @@protoc_insertion_point(destructor:ABDChamber.ChamberData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChamberData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.buffer_;
}

void ChamberData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChamberData::Clear() {
// @@protoc_insertion_point(message_clear_start:ABDChamber.ChamberData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.buffer_ != nullptr) {
    delete _impl_.buffer_;
  }
  _impl_.buffer_ = nullptr;
  ::memset(&_impl_.uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usage_) -
      reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.usage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChamberData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 UID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ABDChamber.DataUsage usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_usage(static_cast<::ABDChamber::DataUsage>(val));
        } else
          goto handle_unusual;
        continue;
      // .ABDChamber.Buffer buffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChamberData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ABDChamber.ChamberData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UID = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // .ABDChamber.DataUsage usage = 2;
  if (this->_internal_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_usage(), target);
  }

  // .ABDChamber.Buffer buffer = 3;
  if (this->_internal_has_buffer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::buffer(this),
        _Internal::buffer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ABDChamber.ChamberData)
  return target;
}

size_t ChamberData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ABDChamber.ChamberData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ABDChamber.Buffer buffer = 3;
  if (this->_internal_has_buffer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buffer_);
  }

  // int32 UID = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  // .ABDChamber.DataUsage usage = 2;
  if (this->_internal_usage() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_usage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChamberData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChamberData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChamberData::GetClassData() const { return &_class_data_; }


void ChamberData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChamberData*>(&to_msg);
  auto& from = static_cast<const ChamberData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ABDChamber.ChamberData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_buffer()) {
    _this->_internal_mutable_buffer()->::ABDChamber::Buffer::MergeFrom(
        from._internal_buffer());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_usage() != 0) {
    _this->_internal_set_usage(from._internal_usage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChamberData::CopyFrom(const ChamberData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ABDChamber.ChamberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChamberData::IsInitialized() const {
  return true;
}

void ChamberData::InternalSwap(ChamberData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChamberData, _impl_.usage_)
      + sizeof(ChamberData::_impl_.usage_)
      - PROTOBUF_FIELD_OFFSET(ChamberData, _impl_.buffer_)>(
          reinterpret_cast<char*>(&_impl_.buffer_),
          reinterpret_cast<char*>(&other->_impl_.buffer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChamberData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chamber_2eproto_getter, &descriptor_table_chamber_2eproto_once,
      file_level_metadata_chamber_2eproto[1]);
}

// ===================================================================

class BufferView::_Internal {
 public:
};

BufferView::BufferView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ABDChamber.BufferView)
}
BufferView::BufferView(const BufferView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BufferView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:ABDChamber.BufferView)
}

inline void BufferView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){0}
    , decltype(_impl_.size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BufferView::~BufferView() {
  // @@protoc_insertion_point(destructor:ABDChamber.BufferView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BufferView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BufferView::Clear() {
// @@protoc_insertion_point(message_clear_start:ABDChamber.BufferView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ABDChamber.BufferView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ABDChamber.BufferView)
  return target;
}

size_t BufferView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ABDChamber.BufferView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BufferView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferView::GetClassData() const { return &_class_data_; }


void BufferView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BufferView*>(&to_msg);
  auto& from = static_cast<const BufferView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ABDChamber.BufferView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferView::CopyFrom(const BufferView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ABDChamber.BufferView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferView::IsInitialized() const {
  return true;
}

void BufferView::InternalSwap(BufferView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferView, _impl_.size_)
      + sizeof(BufferView::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(BufferView, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chamber_2eproto_getter, &descriptor_table_chamber_2eproto_once,
      file_level_metadata_chamber_2eproto[2]);
}

// ===================================================================

class Buffer::_Internal {
 public:
  using HasBits = decltype(std::declval<Buffer>()._impl_._has_bits_);
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Buffer::Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ABDChamber.Buffer)
}
Buffer::Buffer(const Buffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Buffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){from._impl_.content_}
    , decltype(_impl_.views_){from._impl_.views_}
    , decltype(_impl_.comment_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ABDChamber.Buffer)
}

inline void Buffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){arena}
    , decltype(_impl_.views_){arena}
    , decltype(_impl_.comment_){}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Buffer::~Buffer() {
  // @@protoc_insertion_point(destructor:ABDChamber.Buffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Buffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.~RepeatedField();
  _impl_.views_.~RepeatedPtrField();
  _impl_.comment_.Destroy();
}

void Buffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:ABDChamber.Buffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.Clear();
  _impl_.views_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.comment_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Buffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_content(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_content(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .ABDChamber.BufferView views = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_views(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ABDChamber.Buffer.comment"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Buffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ABDChamber.Buffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float content = 1;
  if (this->_internal_content_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_content(), target);
  }

  // repeated .ABDChamber.BufferView views = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_views_size()); i < n; i++) {
    const auto& repfield = this->_internal_views(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string comment = 3;
  if (_internal_has_comment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ABDChamber.Buffer.comment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ABDChamber.Buffer)
  return target;
}

size_t Buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ABDChamber.Buffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float content = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_content_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .ABDChamber.BufferView views = 2;
  total_size += 1UL * this->_internal_views_size();
  for (const auto& msg : this->_impl_.views_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string comment = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Buffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Buffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Buffer::GetClassData() const { return &_class_data_; }


void Buffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Buffer*>(&to_msg);
  auto& from = static_cast<const Buffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ABDChamber.Buffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.content_.MergeFrom(from._impl_.content_);
  _this->_impl_.views_.MergeFrom(from._impl_.views_);
  if (from._internal_has_comment()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Buffer::CopyFrom(const Buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ABDChamber.Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buffer::IsInitialized() const {
  return true;
}

void Buffer::InternalSwap(Buffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_.InternalSwap(&other->_impl_.content_);
  _impl_.views_.InternalSwap(&other->_impl_.views_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Buffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chamber_2eproto_getter, &descriptor_table_chamber_2eproto_once,
      file_level_metadata_chamber_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ABDChamber
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ABDChamber::ChamberLogin*
Arena::CreateMaybeMessage< ::ABDChamber::ChamberLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ABDChamber::ChamberLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::ABDChamber::ChamberData*
Arena::CreateMaybeMessage< ::ABDChamber::ChamberData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ABDChamber::ChamberData >(arena);
}
template<> PROTOBUF_NOINLINE ::ABDChamber::BufferView*
Arena::CreateMaybeMessage< ::ABDChamber::BufferView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ABDChamber::BufferView >(arena);
}
template<> PROTOBUF_NOINLINE ::ABDChamber::Buffer*
Arena::CreateMaybeMessage< ::ABDChamber::Buffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ABDChamber::Buffer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
