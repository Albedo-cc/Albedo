// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chamber.proto

#include "chamber.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Chamber {
PROTOBUF_CONSTEXPR ChamberData::ChamberData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.sender_)*/0
  , /*decltype(_impl_.usage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChamberDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChamberDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChamberDataDefaultTypeInternal() {}
  union {
    ChamberData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChamberDataDefaultTypeInternal _ChamberData_default_instance_;
}  // namespace Chamber
static ::_pb::Metadata file_level_metadata_chamber_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chamber_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chamber_2eproto = nullptr;

const uint32_t TableStruct_chamber_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chamber::ChamberData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Chamber::ChamberData, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::Chamber::ChamberData, _impl_.usage_),
  PROTOBUF_FIELD_OFFSET(::Chamber::ChamberData, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Chamber::ChamberData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Chamber::_ChamberData_default_instance_._instance,
};

const char descriptor_table_protodef_chamber_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rchamber.proto\022\007Chamber\032\023AlbedoNetData."
  "proto\"o\n\013ChamberData\022\037\n\006sender\030\001 \001(\0162\017.C"
  "hamber.Player\022!\n\005usage\030\002 \001(\0162\022.Chamber.D"
  "ataUsage\022\034\n\004data\030\003 \001(\0132\016.AlbedoNetData*0"
  "\n\006Player\022\n\n\006CAMBER\020\000\022\005\n\001A\020\001\022\005\n\001B\020\002\022\005\n\001C\020"
  "\003\022\005\n\001D\020\004*L\n\tDataUsage\022\026\n\022camera_view_mat"
  "rix\020\000\022\023\n\017chamber_message\020d\022\022\n\016player_mes"
  "sage\020eP\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_chamber_2eproto_deps[1] = {
  &::descriptor_table_AlbedoNetData_2eproto,
};
static ::_pbi::once_flag descriptor_table_chamber_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chamber_2eproto = {
    false, false, 296, descriptor_table_protodef_chamber_2eproto,
    "chamber.proto",
    &descriptor_table_chamber_2eproto_once, descriptor_table_chamber_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_chamber_2eproto::offsets,
    file_level_metadata_chamber_2eproto, file_level_enum_descriptors_chamber_2eproto,
    file_level_service_descriptors_chamber_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chamber_2eproto_getter() {
  return &descriptor_table_chamber_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chamber_2eproto(&descriptor_table_chamber_2eproto);
namespace Chamber {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Player_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chamber_2eproto);
  return file_level_enum_descriptors_chamber_2eproto[0];
}
bool Player_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataUsage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chamber_2eproto);
  return file_level_enum_descriptors_chamber_2eproto[1];
}
bool DataUsage_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChamberData::_Internal {
 public:
  static const ::AlbedoNetData& data(const ChamberData* msg);
};

const ::AlbedoNetData&
ChamberData::_Internal::data(const ChamberData* msg) {
  return *msg->_impl_.data_;
}
void ChamberData::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
ChamberData::ChamberData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Chamber.ChamberData)
}
ChamberData::ChamberData(const ChamberData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChamberData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.usage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::AlbedoNetData(*from._impl_.data_);
  }
  ::memcpy(&_impl_.sender_, &from._impl_.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usage_) -
    reinterpret_cast<char*>(&_impl_.sender_)) + sizeof(_impl_.usage_));
  // @@protoc_insertion_point(copy_constructor:Chamber.ChamberData)
}

inline void ChamberData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.sender_){0}
    , decltype(_impl_.usage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChamberData::~ChamberData() {
  // @@protoc_insertion_point(destructor:Chamber.ChamberData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChamberData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void ChamberData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChamberData::Clear() {
// @@protoc_insertion_point(message_clear_start:Chamber.ChamberData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  ::memset(&_impl_.sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usage_) -
      reinterpret_cast<char*>(&_impl_.sender_)) + sizeof(_impl_.usage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChamberData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Chamber.Player sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sender(static_cast<::Chamber::Player>(val));
        } else
          goto handle_unusual;
        continue;
      // .Chamber.DataUsage usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_usage(static_cast<::Chamber::DataUsage>(val));
        } else
          goto handle_unusual;
        continue;
      // .AlbedoNetData data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChamberData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chamber.ChamberData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Chamber.Player sender = 1;
  if (this->_internal_sender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sender(), target);
  }

  // .Chamber.DataUsage usage = 2;
  if (this->_internal_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_usage(), target);
  }

  // .AlbedoNetData data = 3;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chamber.ChamberData)
  return target;
}

size_t ChamberData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chamber.ChamberData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AlbedoNetData data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .Chamber.Player sender = 1;
  if (this->_internal_sender() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sender());
  }

  // .Chamber.DataUsage usage = 2;
  if (this->_internal_usage() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_usage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChamberData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChamberData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChamberData::GetClassData() const { return &_class_data_; }


void ChamberData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChamberData*>(&to_msg);
  auto& from = static_cast<const ChamberData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Chamber.ChamberData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::AlbedoNetData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_sender() != 0) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (from._internal_usage() != 0) {
    _this->_internal_set_usage(from._internal_usage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChamberData::CopyFrom(const ChamberData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chamber.ChamberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChamberData::IsInitialized() const {
  return true;
}

void ChamberData::InternalSwap(ChamberData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChamberData, _impl_.usage_)
      + sizeof(ChamberData::_impl_.usage_)
      - PROTOBUF_FIELD_OFFSET(ChamberData, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChamberData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chamber_2eproto_getter, &descriptor_table_chamber_2eproto_once,
      file_level_metadata_chamber_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Chamber
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Chamber::ChamberData*
Arena::CreateMaybeMessage< ::Chamber::ChamberData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Chamber::ChamberData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
