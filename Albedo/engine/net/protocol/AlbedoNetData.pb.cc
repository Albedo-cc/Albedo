// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AlbedoNetData.proto

#include "AlbedoNetData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR AlbedoNetDataView::AlbedoNetDataView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlbedoNetDataViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlbedoNetDataViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlbedoNetDataViewDefaultTypeInternal() {}
  union {
    AlbedoNetDataView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlbedoNetDataViewDefaultTypeInternal _AlbedoNetDataView_default_instance_;
PROTOBUF_CONSTEXPR AlbedoNetData::AlbedoNetData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.views_)*/{}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AlbedoNetDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlbedoNetDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlbedoNetDataDefaultTypeInternal() {}
  union {
    AlbedoNetData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlbedoNetDataDefaultTypeInternal _AlbedoNetData_default_instance_;
static ::_pb::Metadata file_level_metadata_AlbedoNetData_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_AlbedoNetData_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_AlbedoNetData_2eproto = nullptr;

const uint32_t TableStruct_AlbedoNetData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AlbedoNetDataView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AlbedoNetDataView, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::AlbedoNetDataView, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::AlbedoNetData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AlbedoNetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AlbedoNetData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::AlbedoNetData, _impl_.views_),
  PROTOBUF_FIELD_OFFSET(::AlbedoNetData, _impl_.comment_),
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AlbedoNetDataView)},
  { 8, 17, -1, sizeof(::AlbedoNetData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_AlbedoNetDataView_default_instance_._instance,
  &::_AlbedoNetData_default_instance_._instance,
};

const char descriptor_table_protodef_AlbedoNetData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023AlbedoNetData.proto\"1\n\021AlbedoNetDataVi"
  "ew\022\016\n\006offset\030\001 \001(\005\022\014\n\004size\030\002 \001(\005\"b\n\rAlbe"
  "doNetData\022\014\n\004data\030\001 \003(\002\022!\n\005views\030\002 \003(\0132\022"
  ".AlbedoNetDataView\022\024\n\007comment\030\003 \001(\tH\000\210\001\001"
  "B\n\n\010_commentb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_AlbedoNetData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_AlbedoNetData_2eproto = {
    false, false, 180, descriptor_table_protodef_AlbedoNetData_2eproto,
    "AlbedoNetData.proto",
    &descriptor_table_AlbedoNetData_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_AlbedoNetData_2eproto::offsets,
    file_level_metadata_AlbedoNetData_2eproto, file_level_enum_descriptors_AlbedoNetData_2eproto,
    file_level_service_descriptors_AlbedoNetData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_AlbedoNetData_2eproto_getter() {
  return &descriptor_table_AlbedoNetData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_AlbedoNetData_2eproto(&descriptor_table_AlbedoNetData_2eproto);

// ===================================================================

class AlbedoNetDataView::_Internal {
 public:
};

AlbedoNetDataView::AlbedoNetDataView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AlbedoNetDataView)
}
AlbedoNetDataView::AlbedoNetDataView(const AlbedoNetDataView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlbedoNetDataView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:AlbedoNetDataView)
}

inline void AlbedoNetDataView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){0}
    , decltype(_impl_.size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlbedoNetDataView::~AlbedoNetDataView() {
  // @@protoc_insertion_point(destructor:AlbedoNetDataView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlbedoNetDataView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlbedoNetDataView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlbedoNetDataView::Clear() {
// @@protoc_insertion_point(message_clear_start:AlbedoNetDataView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlbedoNetDataView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlbedoNetDataView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlbedoNetDataView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlbedoNetDataView)
  return target;
}

size_t AlbedoNetDataView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlbedoNetDataView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlbedoNetDataView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlbedoNetDataView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlbedoNetDataView::GetClassData() const { return &_class_data_; }


void AlbedoNetDataView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlbedoNetDataView*>(&to_msg);
  auto& from = static_cast<const AlbedoNetDataView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AlbedoNetDataView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlbedoNetDataView::CopyFrom(const AlbedoNetDataView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlbedoNetDataView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlbedoNetDataView::IsInitialized() const {
  return true;
}

void AlbedoNetDataView::InternalSwap(AlbedoNetDataView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlbedoNetDataView, _impl_.size_)
      + sizeof(AlbedoNetDataView::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(AlbedoNetDataView, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlbedoNetDataView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AlbedoNetData_2eproto_getter, &descriptor_table_AlbedoNetData_2eproto_once,
      file_level_metadata_AlbedoNetData_2eproto[0]);
}

// ===================================================================

class AlbedoNetData::_Internal {
 public:
  using HasBits = decltype(std::declval<AlbedoNetData>()._impl_._has_bits_);
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AlbedoNetData::AlbedoNetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AlbedoNetData)
}
AlbedoNetData::AlbedoNetData(const AlbedoNetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlbedoNetData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.views_){from._impl_.views_}
    , decltype(_impl_.comment_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AlbedoNetData)
}

inline void AlbedoNetData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.views_){arena}
    , decltype(_impl_.comment_){}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlbedoNetData::~AlbedoNetData() {
  // @@protoc_insertion_point(destructor:AlbedoNetData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlbedoNetData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.views_.~RepeatedPtrField();
  _impl_.comment_.Destroy();
}

void AlbedoNetData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlbedoNetData::Clear() {
// @@protoc_insertion_point(message_clear_start:AlbedoNetData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.views_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.comment_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlbedoNetData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .AlbedoNetDataView views = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_views(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AlbedoNetData.comment"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlbedoNetData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlbedoNetData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  // repeated .AlbedoNetDataView views = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_views_size()); i < n; i++) {
    const auto& repfield = this->_internal_views(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string comment = 3;
  if (_internal_has_comment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AlbedoNetData.comment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlbedoNetData)
  return target;
}

size_t AlbedoNetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlbedoNetData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .AlbedoNetDataView views = 2;
  total_size += 1UL * this->_internal_views_size();
  for (const auto& msg : this->_impl_.views_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string comment = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlbedoNetData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlbedoNetData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlbedoNetData::GetClassData() const { return &_class_data_; }


void AlbedoNetData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlbedoNetData*>(&to_msg);
  auto& from = static_cast<const AlbedoNetData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AlbedoNetData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.views_.MergeFrom(from._impl_.views_);
  if (from._internal_has_comment()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlbedoNetData::CopyFrom(const AlbedoNetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlbedoNetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlbedoNetData::IsInitialized() const {
  return true;
}

void AlbedoNetData::InternalSwap(AlbedoNetData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.views_.InternalSwap(&other->_impl_.views_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AlbedoNetData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AlbedoNetData_2eproto_getter, &descriptor_table_AlbedoNetData_2eproto_once,
      file_level_metadata_AlbedoNetData_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AlbedoNetDataView*
Arena::CreateMaybeMessage< ::AlbedoNetDataView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlbedoNetDataView >(arena);
}
template<> PROTOBUF_NOINLINE ::AlbedoNetData*
Arena::CreateMaybeMessage< ::AlbedoNetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlbedoNetData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
